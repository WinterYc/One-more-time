<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Tower Of Van Gogh</title>
    <style>
        * {
            padding: 0;
            margin: 0;
        }
        
        body {
            background-color: black;
        }
        canvas {
            margin-left: 300px;
            margin-top: 100px;
            width: 300px;
            height: 300px;
            background-color: black;
        }
    </style>
</head>
<body>
<canvas width="1800" height="1800" id="cas"></canvas>
</body>
<script>

    // 处理弧度与角度的计算
    function toAngle ( radian ) {
        return radian * 180 / Math.PI;
    }
    function toRadian ( angle ) {
        return angle * Math.PI / 180;
    }

    var cas = document.getElementById( 'cas' );

    var ctx = cas.getContext( '2d' );

    var x0 = cas.width / 2;
    var y0 = cas.height / 2;
    var radius = 15;
    var a = 0;
    var b = 0;
    var c = 0;
    var arr = [ 'red' , 'aqua' , 'blue' , 'lightgreen' , 'yellow' , 'deeppink', 'dodgerblue', 'orangered', 'greenyellow', 'springgreen' ];
    ctx.shadowColor = 'black';
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 20;
    ctx.shadowBlur = 20;
//    ctx.setLineDash( [ 2 , 2 ] );
    setInterval( function () {
        ctx.beginPath();
//        ctx.globalAlpha = 0.6;
        ctx.globalCompositeOperation = 'copy';
        ctx.lineWidth = 4;
        ctx.moveTo( x0, y0 );
        ctx.arc( x0, y0, radius, toRadian( b - 60 ), toRadian( b ) );
        ctx.arc( x0, y0, radius + 15, toRadian( b*1.1 ), toRadian( b*1.1 + 15 ) );
        ctx.arc( x0, y0, radius + 30, toRadian( b*1.15 + 15 ), toRadian( b*1.15 + 30 ) );
        ctx.arc( x0, y0, radius + 45, toRadian( b*1.2 + 30 ), toRadian( b*1.2 + 45 ) );
        ctx.arc( x0, y0, radius + 60, toRadian( b*1.25 + 45 ), toRadian( b*1.25 + 60 ) );
        ctx.arc( x0, y0, radius + 75, toRadian( b*1.3 + 60 ), toRadian( b*1.3 + 75 ) );
        ctx.arc( x0, y0, radius + 90, toRadian( b*1.35 + 75 ), toRadian( b*1.35 + 90 ) );
        ctx.arc( x0, y0, radius + 105, toRadian( b*1.4 + 90 ), toRadian( b*1.4 + 105 ) );
        ctx.arc( x0, y0, radius + 120, toRadian( b*1.45 + 105 ), toRadian( b*1.45 + 120 ) );
        ctx.arc( x0, y0, radius + 135, toRadian( b*1.5 + 120 ), toRadian( b*1.5 + 135 ) );
        ctx.arc( x0, y0, radius + 150, toRadian( b*1.55 + 135 ), toRadian( b*1.55 + 150 ) );
        ctx.arc( x0, y0, radius + 165, toRadian( b*1.6 + 150 ), toRadian( b*1.6 + 165 ) );
        ctx.arc( x0, y0, radius + 180, toRadian( b*1.65 + 165 ), toRadian( b*1.65 + 180 ) );
        ctx.arc( x0, y0, radius + 195, toRadian( b*1.7 + 180 ), toRadian( b*1.7 + 195 ) );
        ctx.arc( x0, y0, radius + 210, toRadian( b*1.75 + 195 ), toRadian( b*1.75 + 210 ) );
        ctx.arc( x0, y0, radius + 225, toRadian( b*1.8 + 210 ), toRadian( b*1.8 + 225 ) );
        ctx.arc( x0, y0, radius + 240, toRadian( b*1.85 + 225 ), toRadian( b*1.85 + 240 ) );
        ctx.arc( x0, y0, radius + 255, toRadian( b*1.9 + 240 ), toRadian( b*1.9 + 255 ) );
        ctx.arc( x0, y0, radius + 270, toRadian( b*1.95 + 255 ), toRadian( b*1.95 + 270 ) );
        ctx.arc( x0, y0, radius + 285, toRadian( b*2 + 270 ), toRadian( b*2 + 285 ) );
        ctx.arc( x0, y0, radius + 300, toRadian( b*2.05 + 285 ), toRadian( b*2.05 + 300 ) );
        ctx.arc( x0, y0, radius + 315, toRadian( b*2.1 + 300 ), toRadian( b*2.1 + 315 ) );
        ctx.arc( x0, y0, radius + 330, toRadian( b*2.15 + 315 ), toRadian( b*2.15 + 330 ) );
        ctx.arc( x0, y0, radius + 345, toRadian( b*2.2 + 330 ), toRadian( b*2.2 + 345 ) );
        ctx.arc( x0, y0, radius + 360, toRadian( b*2.25 + 345 ), toRadian( b*2.25 + 360 ) );
        ctx.arc( x0, y0, radius + 560, toRadian( -90 ), toRadian( -90 ) );
        ctx.strokeStyle = a;
        ctx.closePath();
        ctx.stroke();
        b += 1.5;
        c += 1;
        if ( c % 80 == 0 ) {
            a = arr[ Math.ceil(Math.random()*9) ];
        }
    },1 );

</script>
</html>
